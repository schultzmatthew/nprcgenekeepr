dput(d)
y <- "x"
d <- data.frame(x = 1, y = 2)
dput(d)
d[ , y, drop = FALSE]
dput(d)
d1 <- d[ , y, drop = FALSE]
dput(d1)
y <- "x"
d[[x]]
d1[[x]]
d1[["x"]]
library(nprcmanager)
?getLogo
getLog
getLogo()
?duplicated
library(nprcmanager)
version("nprcmanager")
devtools::install_github(nprcmanager)
devtools::install_github("nprcmanager")
devtools::install_github("rmsharp/nprcmanager")
sessionInfo()
32/28
32/60
quine.hi <- aov(log(Days + 2.5) ~ .^4, quine)#
quine.nxt <- update(quine.hi, . ~ . - Eth:Sex:Age:Lrn)#
quine.stp <- stepAIC(quine.nxt,#
    scope = list(upper = ~Eth*Sex*Age*Lrn, lower = ~1),#
    trace = FALSE)#
quine.stp$anova#
#
cpus1 <- cpus#
attach(cpus)#
for(v in names(cpus)[2:7])#
  cpus1[[v]] <- cut(cpus[[v]], unique(quantile(cpus[[v]])),#
                    include.lowest = TRUE)#
detach()#
cpus0 <- cpus1[, 2:8]  # excludes names, authors' predictions#
cpus.samp <- sample(1:209, 100)#
cpus.lm <- lm(log10(perf) ~ ., data = cpus1[cpus.samp,2:8])#
cpus.lm2 <- stepAIC(cpus.lm, trace = FALSE)#
cpus.lm2$anova
library(MASS)
quine.hi <- aov(log(Days + 2.5) ~ .^4, quine)#
quine.nxt <- update(quine.hi, . ~ . - Eth:Sex:Age:Lrn)#
quine.stp <- stepAIC(quine.nxt,#
    scope = list(upper = ~Eth*Sex*Age*Lrn, lower = ~1),#
    trace = FALSE)#
quine.stp$anova#
#
cpus1 <- cpus#
attach(cpus)#
for(v in names(cpus)[2:7])#
  cpus1[[v]] <- cut(cpus[[v]], unique(quantile(cpus[[v]])),#
                    include.lowest = TRUE)#
detach()#
cpus0 <- cpus1[, 2:8]  # excludes names, authors' predictions#
cpus.samp <- sample(1:209, 100)#
cpus.lm <- lm(log10(perf) ~ ., data = cpus1[cpus.samp,2:8])#
cpus.lm2 <- stepAIC(cpus.lm, trace = FALSE)#
cpus.lm2$anova
summary(cpus.lm2)
coef(cpus.lm2)
str(cpus.lm2)
example(birthwt)#
birthwt.glm <- glm(low ~ ., family = binomial, data = bwt)#
birthwt.step <- stepAIC(birthwt.glm, trace = FALSE)#
birthwt.step$anova#
birthwt.step2 <- stepAIC(birthwt.glm, ~ .^2 + I(scale(age)^2)#
    + I(scale(lwt)^2), trace = FALSE)#
birthwt.step2$anova#
#
quine.nb <- glm.nb(Days ~ .^4, data = quine)#
quine.nb2 <- stepAIC(quine.nb)#
quine.nb2$anova
install.packages("devtools")#
devtools::install_github("rmsharp/stepwiser")
library(rmsutilityr)
get_pkg_list()
1627/1756
1652/1756
payments <- c(3200)
balance <- 8806
balance = payments
balance <- 8806
balance - payments
payments <- c(3200, 1900)
balance - sum(payments)
total <- 3720
invoices <- c(812, 1015, 1015)
total - sum(invoices)
1600 + 878
total <- 2554
rate <- 67.67
total/rate
37.75 * rate
3300*0.021
citation("fortunes")
fortune(author = "Brian")
library(fortunes)
fortune(author = "Brian")
fortune(which = "SAS", author = "Brian")
fortune(which = "SAS", author = "Harrell")
library(rmsutilityr)
rmsutilityr::get_pkg_descriptions("leaflet")
rmsutilityr::get_pkg_descriptions("leaflet")$License
lib.loc
lib.loc <- "/Library/Frameworks/R.framework/Versions/3.5/Resources/library"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
lib_loc <- "/Library/Frameworks/R.framework/Versions/3.5/Resources/library"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
to_install
install.packages(pkgs = to_install)
bill <- c(146.29, 163, 84.89, 69.75)
sum(bill)
devtools::install_github("rmsharp/snprcspf")
library(rstuidoapi)
library(rstudioapi)
askForPassword("Enter")
.rs.api.askForPassword()
library(scidb)
lscidbconnect(..., password = readline())
scidbconnect(..., password = readline())
library(scidb)
scidbconnect(..., password = readline())
?scidbconnect
scidbconnect(password = readline())
?scidbconnect
test <- scidbconnect(username = "plu7553", password=readline(prompt ="password:"), port = 8083)
get_password <- function() {#
cat("Password: ")#
system("stty -echo")#
a <- readline()#
system("stty echo")#
cat("\n")#
return(a)#
}
test <- get_password()
test
options(echo = FALSE)
this is it
get_password()
options(echo = TRUE)
load("/Users/msharp/Downloads/packages.rds")
dir.choose()
?file.choose
install.packages('rsconnect')
rsconnect::setAccountInfo(name='rmsharp',#
			  token='21E645EB902782EE92D38460CF40411A',#
			  secret='XviFVJkAbaT9LayjCm89Aq6JVXYDGL0Qme7Ldnn4')
library(rsconnect)#
rsconnect::deployApp("https://github.com/rmsharp/nprcmanager")
library(nprcmanager)
?nprcmanager
library(shiny)
library(bookdown)
library(pkgdown)
81.79/10700.45
(12 * 81.79)/10700.45
library(nprcmanager)
makeExamplePedigreeFile(fileType = "txt")
library(devtools)
?save
data("exampleNprcgenekeeprConfig")#
View(exampleNprcgenekeeprConfig)
library(nprcgenekeepr)
data("exampleNprcgenekeeprConfig")#
View(exampleNprcgenekeeprConfig)
?colors
colors()
?color
??color
colours()
?colours
demo("colors")
?pkgdown::build_site
library(nprcgenekeepr)
nprcgenekeepr:::checkedChangedColList
nprcgenekeepr:::checkChangedColList
nprcgenekeepr:::checkChangedColsList
nprcgenekeepr:::checkChangedColsLst
devtools::install_github("rmsharp/nprcmanager")
devtools::install_github("rmsharp/nprcgenekeepr")
devtools::install_github("rmsharp/snprcgenekeepr")
devtools::install_github("rmsharp/snprcspf")
16 * 2.25 / 27
1.75 / 27
1.75 * 16 / 27
flour_cups <- 16 * 2.25 /27
wheat_bran_T <- 1.75 * 16 / 27
wheat_germ_T <- 1.25 * 16 / 27
nonfat_dry_milk <- 4 * 16 / 27
nonfat_dry_milk_T <- 4 * 16 / 27
nonfat_dry_milk <- NULL
salt_t <- 2.67 * 3 / 27
sugar_T <- 3 * 16 / 27
baking_powder_T <- 16 / 27
canola_oil_c <- 3.5 / 27
devtools::install_github("rmsharp/nprcgenekeepr")
?shiny
library(shiny)
?shiny
l <- 4.25
s <- 3
s/l * 5.5
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")#
if (!file.exists(dotR)) dir.create(dotR)#
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))#
if (!file.exists(M)) file.create(M)#
cat(if( grepl("^darwin", R.version$os)) "\nCXX14FLAGS=-O3 -march=native -mtune=native -arch x86_64 -ftemplate-depth-256" else #
    if (.Platform$OS.type == "windows") "\nCXX14FLAGS=-O3 -mtune=native -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2" else#
    "CXX14FLAGS = -fPIC",#
    file = M, sep = "\n", append = TRUE)
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
// saved as schools.stan#
data {#
  int<lower=0> J;         // number of schools #
  real y[J];              // estimated treatment effects#
  real<lower=0> sigma[J]; // standard error of effect estimates #
}#
parameters {#
  real mu;                // population treatment effect#
  real<lower=0> tau;      // standard deviation in treatment effects#
  vector[J] eta;          // unscaled deviation from mu by school#
}#
transformed parameters {#
  vector[J] theta = mu + tau * eta;        // school treatment effects#
}#
model {#
  target += normal_lpdf(eta | 0, 1);       // prior log-density#
  target += normal_lpdf(y | theta, sigma); // log-likelihood#
}
system.file("include", "src", "stan", "model", "model_header.hpp",#
            package = "StanHeaders")
example(stan_model, package = "rstan", run.dontrun = TRUE)
tidyverse_packages(include_self = TRUE)
library(tidyverse)
tidyverse_packages(include_self = TRUE)
library(rlib)
library(extrafont)
font_install("DejaVu Sans")
library(xtable)
?print.xtable
library(eia)
eia_set_key("34ae1dbc42af7b45a5500ea8af2df860")
eia_get_key()
library(eia)
eia_get_key()
library(eia)
eia_get_key()
library(eia)
eia_get_key()
library(eia)
eia_get_key()
key <- Sys.getenv("EIA_KEY")
key
Sys.getenv("EIA_KEY")
library(eia)
Sys.getenv("EIA_KEY")
eia_get_key()
debug(eia_get_key)
eia_get_key()
Sys.getenv("EIA_KEY")
Sys.getenv()
Sys.getenv("EIA_KEY")
eia_cats()
library(eia)
eia_cats()
library(readr)
?read_csv
?cols
cols(a = "i", b = "d", c = "_")
?read.csv
?class
library(xtable)
?xtable
library(ggplot)
library(ggplot2)
data(cars)
str(cars)
DataFrame <- data.frame(X_Values = cars$speed, Y_Values = cars$dist)
ggplot(data = DataFrame, mapping = aes(x=X_Values, y=Y_Values, color = Color)) + geom_point()
Color <- "blue"
ggplot(data = DataFrame, mapping = aes(x=X_Values, y=Y_Values, color = Color)) + geom_point()
ggplot(data = DataFrame, mapping = aes(x=X_Values, y=Y_Values)) + geom_point(colour = Color)
getwd()
(5000 * 26) * 1.165
salary <- ((5000 * 26) * 1.165)
salary / 46
(salary / 46) / 40
67.67 * 200
80 * 67.67
280 * 67.67
5000/67.67
(salary * 1.17)/ 46
((salary * 1.17)/ 46) / 40
360/64
12 * 100
library(lubridate)
ddays(mdy("12/28/2020") - mdy("05/14/2018"))
(mdy("12/28/2020") - mdy("05/14/2018")
)
48*120*9
library(lubridate)
y <- as.Date("01/14/2021") - as.Date("04/12/1989")
y <- mdy("01/14/2021") - mdy("04/12/1989")
y
eyear(y)
year(y)
y/365.25
fredr(#
  series_id = "UNRATE",#
  observation_start = as.Date("1990-01-01"),#
  observation_end = as.Date("2000-01-01")#
)
library(fredr)
fredr(#
  series_id = "UNRATE",#
  observation_start = as.Date("1990-01-01"),#
  observation_end = as.Date("2000-01-01")#
)
?rvcheck
??rvcheck
library(rvcheck)
?rvcheck
??rvcheck
library(shiny)
?shiny::%OR%
?shiny:::%OR%
?rlang::`%||%`
??validate_email
rhub::validate_email(email = "rmsharp@me.com")
pkgdown::build_site()
getwd()
pkgdown::build_site()
pkgdown::build_site()
